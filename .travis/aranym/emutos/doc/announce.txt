Dear Atari Community!


We are happy to announce a new public release of EmuTOS:

EmuTOS 0.9.7 -- November 17, 2016



INTRODUCTION

EmuTOS is a single-user single-tasking operating system for 32-bit Atari
computers, clones and emulators. It can be used as a replacement for the
TOS images typically needed by emulators and can also run on some real
hardware, including the Atari ST(e), TT, and Falcon, and the FireBee. It
can even run on non-Atari hardware such as Amiga and ColdFire Evaluation
Boards. All the source code is open and free, licensed under the GNU
General Public License (GPL).



CHANGES SINCE RELEASE 0.9.6

Major changes:
- BIOS: add support for extended MBR partitions
- BIOS: add support for MonSTer board
- BIOS: configure & size ST-RAM on TT
- BIOS: add support for Eiffel on CAN bus on ColdFire EVB
- BIOS: add _5MS cookie to support FreeMiNT on non-Atari hardware
- BIOS: add support for Apollo Core 68080
- BDOS: set archive flag when file is created/modified
- EmuDesk: allow disk delete via desktop File menu item
- EmuDesk: implement desktop 'Install devices'
- EmuDesk: implement desktop 'Install icon'
- EmuDesk: implement desktop 'Remove desktop icon'
- EmuDesk: rewrite 'Install application'
- EmuCON2: provide a standalone version of EmuCON2

Other changes:
- AES: allow autorun program to start in character mode
- AES: fix bug when File Selector accesses empty drive
- AES: fix loop in file selector if filemask is too long
- AES: fix bug: the file selector modified the DTA pointer
- AES: rewrite wildcmp() to fix bug
- BDOS: fix GEMDOS standard handle numbers
- BDOS: rewrite Fsfirst/Fsnext to fix design problem
- BDOS: use single pool for all internal memory requests
- BDOS: fix I/O status for redirected character devices
- BDOS: fix date stamp in . and .. directory entries
- BDOS: fix return code for Fsfirst()
- BDOS: make EmuTOS respect user-assigned FRB
- BDOS: make ctl-C interrupt Cconin
- BDOS: return EOF indicator on redirected char devices
- BDOS: validate attribute bits passed to Fattrib()
- BDOS: validate handles for Fseek()/Fread()/Fwrite()/Fdatime()
- BIOS: add Norwegian & Swedish keyboard support
- BIOS: add support for byte-swapped IDE cable (disabled by default)
- BIOS: allow configuration of max logical sector size
- BIOS: fix VDI->hardware colour calculation
- BIOS: fix os_conf value and usage in multilanguage ROMs
- BIOS: improve performance of Rwabs() on floppy disks
- BIOS: make Ikbdws()/Midiws() handle 'cnt' like Atari TOS
- BIOS: set density for read/write/format of HD floppies
- BIOS: fix boot on Amiga with 68000 CPU
- BIOS: fix RAM size with BaS_gcc on ColdFire EVB
- BIOS: fix _FPU cookie for 68060 without FPU
- BIOS: fix values returned by VgetRGB()/vq_color()
- EmuDesk: make desktop shift-click behave the same as TOS
- EmuDesk: prompt if folder name conflict during move/copy
- EmuDesk: make many desktop and AES dialogs more concise
- EmuDesk: fix desktop icon drag and drop positioning
- EmuDesk: allow 'Too many windows' alert to be issued
- EmuDesk: always issue extra alert if deleting entire disk
- EmuDesk: always keep part of the mover gadget onscreen
- EmuDesk: avoid unnecessary window refreshes
- EmuDesk: handle name conflict during copy like Atari TOS
- EmuDesk: support additional keys during "Show file"
- EmuDesk: add copyright year in EmuDesk about dialog
- General: display total RAM on welcome screen
- General: fix _drvbits tests for drives > P
- VDI: fix rectangle drawing errors
- VDI: fix bug: v_bar() draws perimeter wrongly
- VDI: fix vq_curaddress(), vs_curaddress()
- Lots of source code cleanup and minor bug fixes


For a detailed list of changes, refer to the git repository.



DESCRIPTION

EmuTOS is basically made up of the following:

- The BIOS, which is the basic input output system
- The XBIOS, which provides the interface to the hardware
- The BDOS, which are the high level OS routines, often known as GEMDOS
- The VDI, the virtual device interface, i.e. the screen driver
- The AES, the application environment services or window manager
- The EmuDesk desktop, which is the graphical shell to the user
- EmuCON2, the command-line interpreter

The BIOS and XBIOS code is our own development. It is written from
scratch and implements all relevant TOS 1.0 Bios & XBIOS functionality,
and a bit more, e.g. hard disk access. See doc/status.txt for details.

The GEMDOS part is based on Digital Research's GEMDOS sources, which were
made available under GPL license in 1999 by Caldera.

The graphical parts like VDI and AES are now more or less fully
implemented up to TOS v1.04 level. They work in all the graphics modes
of the original Atari ST, with some extensions. For example, systems with
VIDEL support 256 colours and 640x480 screen resolution. Some emulators
can patch EmuTOS to work with much bigger screen resolutions.

The desktop is better than the original one, but not yet as nice as the
one in TOS 2 or higher (although progress has been made). It is still
quite usable, and of course you are always free to use a more advanced
desktop replacement like TeraDesk.

EmuCON2 is a basic but useful command-line interpreter, written from scratch
by Roger Burrows in 2013 to replace the original CLI.

Since EmuTOS just implements TOS functionality, you might want to use
MiNT on top of it in order to run more modern software. EmuTOS is not
an alternative to MiNT, but it's the only free base OS to boot MiNT.



EMULATION AND FUTURE PLATFORM

EmuTOS and MiNT cooperate well. Both can utilize Native Features
(NatFeats) interface for emulators:
    http://wiki.aranym.org/natfeats/proposal

EmuTOS uses this new standard interface for all the relevant native
functions supported by an emulator on which it's running. This interface
proxies the calls to the underlying host OS so that these features don't
need to be emulated. This is both faster and can provide features that
would be infeasible on a real machine. It may allow using modern graphics
cards, provide fast native filesystem access and enable you to use
networking with all bells and whistles - and many other things you might
not have even dreamed of.

The ARAnyM emulator has the most extensive support for NatFeats.
The Hatari emulator supports the basic NatFeats facilities.



HARDWARE

Making EmuTOS run natively on a new hardware platform is more or less just
a question of driver support for EmuTOS. The same for MiNT, if you'd like
to have it running on top of EmuTOS.

This is the currently supported Atari hardware:

- CPU support for m68000, m68010, m68020, m68030, m68040, m68060,
                  ColdFire V4e, and Apollo Core 68080
- FPU detection
- 68030 MMU and cache
- Memory controller (both ST and Falcon)
- TT FastRAM
- Monitor type detection (mono, RGB or VGA)
- DMA controller
- WD 1772 / AJAX Floppy disk controller
- MFP, MFP #2
- PSG
- ST shifter
- STe shifter
- TT shifter
- VIDEL
- ACIAs, IKBD protocol, mouse
- MegaST Real-Time Clock (set clock not tested)
- ICD AdSCSI Plus ST Real-Time Clock
- NVRAM (including RTC)
- Blitter (Blitmode() just returns HW status)
- Microwire
- SCC
- IDE
- ACSI
- SD/MMC
- The Native Features interface to some degree

Currently unsupported hardware features:
- DSP
- SCSI

EmuTOS is also available on some non-Atari hardware:
- Amiga (WinUAE, Amiga 1000, Amiga 1200 with Blizzard 1260)
- ColdFire Evaluation Boards (M5484LITE, M5485EVB)



AVAILABILITY

The EmuTOS home page is:

    http://emutos.sourceforge.net/

The project home is on SourceForge:

    http://sourceforge.net/projects/emutos/

The latest releases can be downloaded from:

    http://sourceforge.net/projects/emutos/files/emutos/

Development snapshots allow you to test the current development progress:

    http://sourceforge.net/projects/emutos/files/snapshots/

The latest sources are always available from our Git server at:

    http://sourceforge.net/p/emutos/code/

If you are just curious or would like to help us develop this nice little
OS, you are invited to subscribe to our mailing list for developers at:

    https://lists.sourceforge.net/lists/listinfo/emutos-devel


We hope that you like EmuTOS. If you have any suggestions or comments, we
always appreciate hearing both the good and the bad things about it.


The EmuTOS development team.

-- 
Originally written by Martin Doering
http://emutos.sourceforge.net/
